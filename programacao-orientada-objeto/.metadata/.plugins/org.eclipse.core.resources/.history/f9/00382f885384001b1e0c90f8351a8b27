import java.util.Iterator;

public class Index {

	public static char[][] initialize() {
		char[][] board = { { 'F', 'F', 'F' }, { 'F', 'F', 'F' }, { 'F', 'F', 'F' } };

		return board;
	}

	public static int status (char M[][]) {
		final Integer[][][] patterns = {
			    //COLUNAS
			    {
			    	{ 0, 0 }, { 1, 0 }, { 2, 0 }
			    },
			    
			    {{ 0, 1 }, { 1, 1 }, { 2, 1 }},
			    {{ 0, 2 }, { 1, 2 }, { 2, 2 }},

			    //LINHAS
			    {{ 0, 0 }, { 0, 1 }, { 0, 2 }},
			    {{ 1, 0 }, { 1, 1 }, { 1, 2 }},
			    {{ 2, 0 }, { 2, 1 }, { 2, 2 }},

			    //DIAGONAIS
			    {{ 0, 0 }, { 1, 1 }, { 2, 2 }},
			    {{ 2, 0 }, { 1, 1 }, { 0, 2 }}
			};
		
		for (int i = 0; i < patterns.length; i++) {
			for (int m = 0; m < M.length; m++) {
				
			}
		}
		
		int winner = 0;
		for (Integer[] pattern: patterns) {
			boolean hasWinner = M[pattern[0]] != null 
	                && M[pattern[0]].equals(M[pattern[1]]) 
	                && M[pattern[0]].equals(M[pattern[2]]);
			
			if(hasWinner && pattern[0] == 'O' && winner == 0) return winner = 1;
			if(hasWinner && pattern[0] == 'X' && winner == 0) return winner = 2;
		}
		
		if(winner != 0) return winner;
		
		int occupiedPositions = 0;
		for (int l = 0; l < M.length; l++) {
			for (int c = 0; c < M[l].length; c++) {
				if(M[l][c] != 'F') occupiedPositions++;
			}
		}

		if(occupiedPositions == 9) return 0;
		
		return -1;
	}

	public static String mostrarTabuleiro(char M[][]) {
		String boardText = "";

		for (int l = 0; l < M.length; l++) {
			boardText += "\n";
			for (int c = 0; c < M[l].length; c++) {
				if (M[l][c] == 'X' || M[l][c] == 'O')
					return boardText += M[l][c];
				boardText += "-";
			}
		}

		return boardText;
	}
}
